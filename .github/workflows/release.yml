name: Create and Publish Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    if: github.ref == 'refs/heads/main'  # Double-check we're on main
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: elroy
          POSTGRES_USER: elroy
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    environment:
      name: release

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Set env variables
      run: |
        echo "ELROY_TEST_POSTGRES_URL=postgresql://elroy:password@localhost:5432/elroy" >> $GITHUB_ENV
        echo "ELROY_POSTGRES_URL=postgresql://elroy:password@localhost:5432/elroy" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Git
      run: |
        git config --global user.name 'elroy-bot'
        git config --global user.email 'noreply@elroy.bot'

    - name: Install bump2version
      run: pip install bump2version

    - name: Get new version
      id: version
      run: |
        NEW_VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.bump_type }} | grep new_version | sed -r s,"^.*=",,)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Bump version
      run: bump2version ${{ github.event.inputs.bump_type }}

    - name: Install dependencies and build
      run: |
        poetry config virtualenvs.create false
        poetry install --no-root
        poetry build

    - name: Run Tests
      run: |
        pytest
      env:
        PYTHONWARNINGS: "ignore::DeprecationWarning"
    - name: Test built package
      run: |
        pip install ./dist/elroy-*.whl
        elroy --version
        echo "This is an installation test. Repeat the following text, and only the following text: 'Hello World!'" | elroy | grep -q "Hello World"
        echo "This is an installation test. The secret number is is 3928" | elroy remember
        echo "This is an installation test. What is the secret number? Respond with the secret number and only the secret number" | elroy | grep -q "3928"
        echo "This is an installation test. The secret number is now 2931" > test.txt
        elroy remember < test.txt
        echo "This is an installation test. What is the secret number? Respond with the secret number and only the secret number" > prompt.txt
        elroy < prompt.txt | grep -q "2931"
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry publish --username $TWINE_USERNAME --password $TWINE_PASSWORD --no-interaction

    - name: Push version bump and tags
      if: success()
      run: |
        git push origin main
        git push origin --tags

    - name: Log in to Container registry
      if: success()
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      if: success()
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: Build and push Docker image
      if: success()
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ELROY_VERSION=v${{ steps.version.outputs.new_version }}
