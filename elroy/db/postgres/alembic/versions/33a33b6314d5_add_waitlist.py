"""add waitlist

Revision ID: 33a33b6314d5
Revises: cc91a5b0fd61
Create Date: 2025-08-13 16:52:04.242173

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = "33a33b6314d5"
down_revision: Union[str, None] = "cc91a5b0fd61"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "waitlistsignup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("email", AutoString(), nullable=False),
        sa.Column("use_case", AutoString(), nullable=True),
        sa.Column("platform", AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.drop_table("goal")
    op.drop_table("timedreminder", if_exists=True)
    op.drop_table("contextualreminder", if_exists=True)
    op.drop_column("message", "memory_metadata")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("message", sa.Column("memory_metadata", sa.TEXT(), autoincrement=False, nullable=True))
    op.create_table(
        "contextualreminder",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("text", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("reminder_context", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_recurring", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="contextualreminder_pkey"),
    )
    op.create_table(
        "timedreminder",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("text", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("trigger_datetime", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="timedreminder_pkey"),
    )
    op.create_table(
        "goal",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("strategy", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("end_condition", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("priority", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("target_completion_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("status_updates", sa.TEXT(), server_default=sa.text("'[]'::text"), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="goal_pkey"),
        sa.UniqueConstraint("user_id", "name", "is_active", name="goal_user_id_name_is_active_key"),
    )
    op.drop_table("waitlistsignup")
    # ### end Alembic commands ###
